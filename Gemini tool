<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Salon Finder & CSV Exporter</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 800px;
        }
        /* Custom modal styles to replace alert() */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        .modal-content {
            background-color: #ffffff;
            margin: 15% auto;
            padding: 20px;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 80%;
            max-width: 400px;
            text-align: center;
        }
    </style>
</head>
<body class="p-4 sm:p-8 flex items-center justify-center min-h-screen">

    <!-- Main Container -->
    <div class="container bg-white p-6 md:p-10 rounded-3xl shadow-2xl space-y-8 border-t-8 border-purple-500">
        <header class="text-center">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">Salon Finder</h1>
            <p class="text-lg text-gray-600">Find hair salons and export your results to a CSV file.</p>
        </header>

        <!-- Search Section -->
        <section class="space-y-4">
            <div class="flex flex-col sm:flex-row gap-4">
                <input id="search-input" type="text" placeholder="e.g., Hair Salons in New York City" class="flex-1 p-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all duration-200" required>
                <button id="search-button" class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-xl transition-all duration-200 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2">
                    Search Salons
                </button>
            </div>
            <div id="loading-indicator" class="hidden text-center text-gray-500 mt-4">
                <p>Searching for salons...</p>
            </div>
        </section>

        <!-- Results and Export Section -->
        <section id="results-section" class="hidden space-y-6">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-semibold text-gray-800">Results</h2>
                <button id="export-button" class="bg-emerald-500 hover:bg-emerald-600 text-white font-semibold py-2 px-4 rounded-xl transition-all duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    Export to CSV
                </button>
            </div>
            
            <div id="results-container" class="space-y-4 max-h-96 overflow-y-auto pr-2">
                <!-- Salon results will be dynamically injected here -->
            </div>
        </section>
        
        <!-- Empty State Message -->
        <p id="empty-state" class="hidden text-center text-gray-500">No results found. Please try a different search.</p>

    </div>

    <!-- Custom Modal -->
    <div id="custom-modal" class="modal">
        <div class="modal-content">
            <p id="modal-message" class="text-gray-700 mb-4"></p>
            <button onclick="document.getElementById('custom-modal').style.display='none'" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded-xl transition-colors duration-200">
                Close
            </button>
        </div>
    </div>
    
    <script>
        const searchInput = document.getElementById('search-input');
        const searchButton = document.getElementById('search-button');
        const exportButton = document.getElementById('export-button');
        const loadingIndicator = document.getElementById('loading-indicator');
        const resultsSection = document.getElementById('results-section');
        const resultsContainer = document.getElementById('results-container');
        const emptyState = document.getElementById('empty-state');
        const customModal = document.getElementById('custom-modal');
        const modalMessage = document.getElementById('modal-message');

        let searchResults = [];

        function showModal(message) {
            modalMessage.textContent = message;
            customModal.style.display = 'block';
        }

        // --- Search Logic ---
        searchButton.addEventListener('click', async () => {
            const query = searchInput.value.trim();
            if (!query) {
                showModal('Please enter a search query.');
                return;
            }
            
            // Clear previous results and set up UI for new search
            resultsContainer.innerHTML = '';
            resultsSection.classList.add('hidden');
            emptyState.classList.add('hidden');
            exportButton.disabled = true;
            searchResults = [];
            loadingIndicator.classList.remove('hidden');

            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            // Define the system instruction to guide the model's response
            const systemPrompt = `You are a data extraction bot. Your task is to extract information about hair salons from search results. For each salon, find the name, address, phone number, and website. Format the output as a JSON array of objects. Each object should have the keys: "name", "address", "phone", and "website". If a piece of data is not available, use "N/A".`;

            // Construct the payload for the API call
            const payload = {
                contents: [{ parts: [{ text: query }] }],
                tools: [{ "google_search": {} }],
                systemInstruction: {
                    parts: [{ text: systemPrompt }]
                },
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "ARRAY",
                        items: {
                            type: "OBJECT",
                            properties: {
                                "name": { "type": "STRING" },
                                "address": { "type": "STRING" },
                                "phone": { "type": "STRING" },
                                "website": { "type": "STRING" }
                            },
                            "propertyOrdering": ["name", "address", "phone", "website"]
                        }
                    }
                }
            };
            
            const maxRetries = 3;
            let currentRetry = 0;
            let extractedData = [];

            while (currentRetry < maxRetries) {
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    
                    if (!response.ok) {
                        if (response.status === 429 && currentRetry < maxRetries - 1) {
                            const delay = Math.pow(2, currentRetry) * 1000;
                            await new Promise(resolve => setTimeout(resolve, delay));
                            currentRetry++;
                            continue;
                        }
                        if (response.status === 401) {
                            showModal('Search failed: API key is invalid or missing. Please ensure your environment is configured correctly.');
                            extractedData = [];
                            break;
                        }
                        throw new Error(`API call failed with status: ${response.status}`);
                    }

                    const result = await response.json();
                    const candidate = result.candidates?.[0];

                    if (candidate && candidate.content?.parts?.[0]?.text) {
                        const jsonString = candidate.content.parts[0].text;
                        try {
                            extractedData = JSON.parse(jsonString);
                        } catch (e) {
                            console.error("Failed to parse JSON:", e);
                            extractedData = [];
                        }
                    }
                    break;

                } catch (error) {
                    if (currentRetry < maxRetries - 1) {
                        const delay = Math.pow(2, currentRetry) * 1000;
                        await new Promise(resolve => setTimeout(resolve, delay));
                        currentRetry++;
                        continue;
                    }
                    console.error("Search failed:", error);
                    showModal("An error occurred during the search. Please check your query and try again.");
                    extractedData = [];
                    break;
                }
            }

            if (extractedData.length > 0) {
                searchResults = extractedData;
                displayResults(searchResults);
                exportButton.disabled = false;
                resultsSection.classList.remove('hidden');
            } else {
                emptyState.classList.remove('hidden');
            }
            loadingIndicator.classList.add('hidden');
        });

        // --- Display Results Logic ---
        function displayResults(results) {
            resultsContainer.innerHTML = '';
            if (results.length === 0) {
                emptyState.classList.remove('hidden');
                return;
            }
            results.forEach(salon => {
                const resultCard = document.createElement('div');
                resultCard.className = 'bg-gray-50 p-4 rounded-xl border border-gray-200 shadow-sm';
                resultCard.innerHTML = `
                    <h3 class="text-lg font-semibold text-gray-700">${salon.name || 'N/A'}</h3>
                    <p class="text-gray-600">${salon.address || 'N/A'}</p>
                    <p class="text-sm text-gray-500">Phone: ${salon.phone || 'N/A'}</p>
                    <a href="${salon.website}" target="_blank" class="text-sm text-purple-600 hover:underline">${salon.website || 'N/A'}</a>
                `;
                resultsContainer.appendChild(resultCard);
            });
        }

        // --- CSV Export Logic ---
        exportButton.addEventListener('click', () => {
            if (searchResults.length === 0) {
                showModal('There are no results to export.');
                return;
            }

            // Create CSV header
            let csvContent = "data:text/csv;charset=utf-8,";
            const headers = Object.keys(searchResults[0]).join(',');
            csvContent += headers + '\n';

            // Add rows
            searchResults.forEach(row => {
                const values = Object.values(row).map(value => `"${value}"`).join(',');
                csvContent += values + '\n';
            });

            // Create and trigger download link
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "salon_results.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });

    </script>

</body>
</html>
